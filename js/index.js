// Generated by LiveScript 1.3.1
(function(){
  var patch, inst, lc, retrieve;
  patch = function(it){
    return it.replace(/臺/g, '台');
  };
  inst = function(opt){
    opt == null && (opt = {});
    this.root = typeof opt.root === typeof ''
      ? document.querySelector(opt.root)
      : opt.root;
    this.lc = {};
    this.type = opt.type;
    return this;
  };
  inst.prototype = import$(Object.create(Object.prototype), {
    init: function(){
      var ref$, root, type, this$ = this;
      ref$ = {
        root: this.root,
        type: this.type
      }, root = ref$.root, type = ref$.type;
      return ld$.fetch("assets/lib/pdmap.tw/" + type + ".topo.json", {
        method: 'GET'
      }, {
        type: 'json'
      }).then(function(topo){
        this$.lc.topo = topo;
        return ld$.fetch("assets/lib/pdmap.tw/" + type + ".meta.json", {
          method: 'GET'
        }, {
          type: 'json'
        });
      }).then(function(meta){
        var features, path;
        this$.lc.meta = meta;
        this$.lc.features = features = topojson.feature(this$.lc.topo, this$.lc.topo.objects["pdmaptw"]).features;
        this$.lc.path = path = d3.geoPath().projection(pdmaptw.projection);
        return d3.select(root).append('svg').append('g').selectAll('path').data(features).enter().append('path').attr('d', path);
      });
    },
    fit: function(){
      var root, g, svg, bcr, bbox, ref$, width, height, padding, scale, w, h;
      root = this.root;
      g = ld$.find(root, 'g', 0);
      svg = d3.select(root).select('svg');
      svg.attr('width', '100%');
      svg.attr('height', '100%');
      bcr = root.getBoundingClientRect();
      bbox = g.getBBox();
      ref$ = [bcr.width, bcr.height], width = ref$[0], height = ref$[1];
      padding = 20;
      scale = Math.min((width - 2 * padding) / bbox.width, (height - 2 * padding) / bbox.height);
      ref$ = [width / 2, height / 2], w = ref$[0], h = ref$[1];
      return g.setAttribute('transform', "translate(" + w + "," + h + ") scale(" + scale + ") translate(" + (-bbox.x - bbox.width / 2) + "," + (-bbox.y - bbox.height / 2) + ")");
    }
  });
  pdmaptw.create = function(opt){
    opt == null && (opt = {});
    return new inst(opt);
  };
  lc = {};
  lc.obj = pdmaptw.create({
    root: ld$.find(document, '#map', 0),
    type: 'county'
  });
  lc.obj.init().then(function(){
    return ld$.fetch("assets/lib/twstat/county/index/index.json", {
      method: 'GET'
    }, {
      type: 'json'
    });
  }).then(function(list){
    var view;
    return view = new ldView({
      root: document.body,
      action: {
        input: {
          select: function(){
            return retrieve(view.get('select').value);
          }
        }
      },
      handler: {
        option: {
          list: function(){
            return list;
          },
          handle: function(arg$){
            var node, data;
            node = arg$.node, data = arg$.data;
            return node.innerText = data;
          }
        }
      }
    });
  });
  return retrieve = function(name){
    name == null && (name = "道路里程長度");
    return ld$.fetch("assets/lib/twstat/county/index/" + name + ".json", {
      method: 'GET'
    }, {
      type: 'json'
    }).then(function(data){
      return lc.data = data;
    }).then(function(){
      var obj, data, ref$, max;
      obj = lc.obj;
      obj.fit();
      data = (ref$ = lc.data)[ref$.length - 1];
      max = Math.max.apply(null, obj.lc.meta.name.map(function(it){
        return data[it] || 0;
      }));
      return d3.select(obj.root).selectAll('path').attr('fill', function(it){
        var name, v;
        name = patch(obj.lc.meta.name[it.properties.c]);
        v = (data[name] || 0) / max;
        return d3.interpolateMagma(v);
      }).attr('stroke', function(){
        return '#000';
      }).attr('stroke-width', function(){
        return 0.00;
      });
    });
  };
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}